{"ast":null,"code":"var _jsxFileName = \"F:\\\\project\\\\next\\\\asd\\\\pages\\\\ability\\\\[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport useSwr from \"swr\";\n\nconst fetcher = url => fetch(url).then(res => res.json());\n\nexport default function User() {\n  const router = useRouter();\n  const {\n    data,\n    error\n  } = useSwr(`/api/ability/${router.query.id}`, fetcher);\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 20\n    }\n  }, \"Failed to load user\");\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 20\n    }\n  }, \"Loading...\");\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, data.name);\n}","map":{"version":3,"sources":["F:/project/next/asd/pages/ability/[id].tsx"],"names":["useRouter","useSwr","fetcher","url","fetch","then","res","json","User","router","data","error","query","id","name"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,MAAMC,OAAO,GAAIC,GAAD,IAASC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAiBC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAAzB,CAAzB;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC9B,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAM;AAAEU,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBV,MAAM,CAAE,gBAAeQ,MAAM,CAACG,KAAP,CAAaC,EAAG,EAAjC,EAAoCX,OAApC,CAA9B;AAEA,MAAIS,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAP;AACX,MAAI,CAACD,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEX,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,IAAI,CAACI,IAAX,CAAP;AACA","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport useSwr from \"swr\";\r\n\r\nconst fetcher = (url) => fetch(url).then((res) => res.json());\r\n\r\nexport default function User() {\r\n\tconst router = useRouter();\r\n\tconst { data, error } = useSwr(`/api/ability/${router.query.id}`, fetcher);\r\n\r\n\tif (error) return <div>Failed to load user</div>;\r\n\tif (!data) return <div>Loading...</div>;\r\n\r\n\treturn <div>{data.name}</div>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}