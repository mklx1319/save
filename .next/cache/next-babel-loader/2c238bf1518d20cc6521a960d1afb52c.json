{"ast":null,"code":"import axios from \"axios\";\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      const abilityList = await axios.get(`${process.env.HOST_URL}/json/ability_info.json`);\n      console.log(id.toString()); // if (abilityList[id]) {\n\n      res.status(200).json({}); // }\n      // throw new Error(\"Cannot find ability data\");\n\n      break;\n\n    default:\n      res.setHeader(\"Allow\", [\"GET\"]);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n});","map":{"version":3,"sources":["F:/project/next/asd/pages/api/ability/[id].ts"],"names":["axios","req","res","query","id","method","abilityList","get","process","env","HOST_URL","console","log","toString","status","json","setHeader","end"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AACnE,QAAM;AACLC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADF;AAELC,IAAAA;AAFK,MAGFJ,GAHJ;;AAKA,UAAQI,MAAR;AACC,SAAK,KAAL;AACC,YAAMC,WAAW,GAAG,MAAMN,KAAK,CAACO,GAAN,CACxB,GAAEC,OAAO,CAACC,GAAR,CAAYC,QAAS,yBADC,CAA1B;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,EAAE,CAACS,QAAH,EAAZ,EAJD,CAKC;;AACAX,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB,EAND,CAOC;AAEA;;AACA;;AACD;AACCb,MAAAA,GAAG,CAACc,SAAJ,CAAc,OAAd,EAAuB,CAAC,KAAD,CAAvB;AACAd,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBG,GAAhB,CAAqB,UAASZ,MAAO,cAArC;AAdF;AAgBA,CAtBD","sourcesContent":["import axios from \"axios\";\r\nimport { NextApiRequest, NextApiResponse } from \"next\";\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n\tconst {\r\n\t\tquery: { id },\r\n\t\tmethod,\r\n\t} = req;\r\n\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\tconst abilityList = await axios.get(\r\n\t\t\t\t`${process.env.HOST_URL}/json/ability_info.json`\r\n\t\t\t);\r\n\t\t\tconsole.log(id.toString());\r\n\t\t\t// if (abilityList[id]) {\r\n\t\t\tres.status(200).json({});\r\n\t\t\t// }\r\n\r\n\t\t\t// throw new Error(\"Cannot find ability data\");\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tres.setHeader(\"Allow\", [\"GET\"]);\r\n\t\t\tres.status(405).end(`Method ${method} Not Allowed`);\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}