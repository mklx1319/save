{"ast":null,"code":"import fetch from \"isomorphic-unfetch\";\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      const data = await fetch(\"http://localhost:3000/json/ability_info.json\");\n      const abilityList = data.json();\n      console.log(data); // if (abilityList[id]) {\n\n      res.status(200).json(abilityList); // }\n      // throw new Error(\"Cannot find ability data\");\n\n      break;\n\n    default:\n      res.setHeader(\"Allow\", [\"GET\"]);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n});","map":{"version":3,"sources":["F:/project/next/asd/pages/api/ability/[id].ts"],"names":["fetch","req","res","query","id","method","data","abilityList","json","console","log","status","setHeader","end"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAGA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AACnE,QAAM;AACLC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADF;AAELC,IAAAA;AAFK,MAGFJ,GAHJ;;AAKA,UAAQI,MAAR;AACC,SAAK,KAAL;AACC,YAAMC,IAAI,GAAG,MAAMN,KAAK,CAAC,8CAAD,CAAxB;AACA,YAAMO,WAAW,GAAGD,IAAI,CAACE,IAAL,EAApB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAHD,CAIC;;AACAJ,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqBD,WAArB,EALD,CAMC;AAEA;;AACA;;AACD;AACCL,MAAAA,GAAG,CAACU,SAAJ,CAAc,OAAd,EAAuB,CAAC,KAAD,CAAvB;AACAV,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBE,GAAhB,CAAqB,UAASR,MAAO,cAArC;AAbF;AAeA,CArBD","sourcesContent":["import fetch from \"isomorphic-unfetch\";\r\nimport { NextApiRequest, NextApiResponse } from \"next\";\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n\tconst {\r\n\t\tquery: { id },\r\n\t\tmethod,\r\n\t} = req;\r\n\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\tconst data = await fetch(\"http://localhost:3000/json/ability_info.json\");\r\n\t\t\tconst abilityList = data.json();\r\n\t\t\tconsole.log(data);\r\n\t\t\t// if (abilityList[id]) {\r\n\t\t\tres.status(200).json(abilityList);\r\n\t\t\t// }\r\n\r\n\t\t\t// throw new Error(\"Cannot find ability data\");\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tres.setHeader(\"Allow\", [\"GET\"]);\r\n\t\t\tres.status(405).end(`Method ${method} Not Allowed`);\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}